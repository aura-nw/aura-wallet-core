// Mocks generated by Mockito 5.4.4 from annotations
// in evm_wallet_core/test/x_wallet/x_wallet_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:evm_wallet_core/src/crypto/chain/chain.dart' as _i2;
import 'package:evm_wallet_core/src/hd_wallet/hd_wallet.dart' as _i7;
import 'package:evm_wallet_core/src/model/transaction/transaction_detail.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:web3dart/web3dart.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EvmChain].
///
/// See the documentation for Mockito's code generation for more information.
class MockEvmChain extends _i1.Mock implements _i2.EvmChain {
  MockEvmChain() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getWalletBalance({required String? address}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWalletBalance,
          [],
          {#address: address},
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getWalletBalance,
            [],
            {#address: address},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i5.TransactionDetail?> getTransactionDetail(
          {required String? txHash}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionDetail,
          [],
          {#txHash: txHash},
        ),
        returnValue: _i3.Future<_i5.TransactionDetail?>.value(),
      ) as _i3.Future<_i5.TransactionDetail?>);

  @override
  _i3.Future<BigInt> estimateGas({
    String? senderAddress,
    String? toAddress,
    BigInt? value,
    BigInt? amountOfGas,
    BigInt? gasPrice,
    BigInt? maxPriorityFeePerGas,
    BigInt? maxFeePerGas,
    _i6.Uint8List? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateGas,
          [],
          {
            #senderAddress: senderAddress,
            #toAddress: toAddress,
            #value: value,
            #amountOfGas: amountOfGas,
            #gasPrice: gasPrice,
            #maxPriorityFeePerGas: maxPriorityFeePerGas,
            #maxFeePerGas: maxFeePerGas,
            #data: data,
          },
        ),
        returnValue: _i3.Future<BigInt>.value(_i4.dummyValue<BigInt>(
          this,
          Invocation.method(
            #estimateGas,
            [],
            {
              #senderAddress: senderAddress,
              #toAddress: toAddress,
              #value: value,
              #amountOfGas: amountOfGas,
              #gasPrice: gasPrice,
              #maxPriorityFeePerGas: maxPriorityFeePerGas,
              #maxFeePerGas: maxFeePerGas,
              #data: data,
            },
          ),
        )),
      ) as _i3.Future<BigInt>);

  @override
  _i3.Future<BigInt> getChainId() => (super.noSuchMethod(
        Invocation.method(
          #getChainId,
          [],
        ),
        returnValue: _i3.Future<BigInt>.value(_i4.dummyValue<BigInt>(
          this,
          Invocation.method(
            #getChainId,
            [],
          ),
        )),
      ) as _i3.Future<BigInt>);

  @override
  _i3.Future<String> sendRawTransaction(_i6.Uint8List? signedTransaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRawTransaction,
          [signedTransaction],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #sendRawTransaction,
            [signedTransaction],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<int> getNonce({required String? address}) => (super.noSuchMethod(
        Invocation.method(
          #getNonce,
          [],
          {#address: address},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [HDWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockHDWallet extends _i1.Mock implements _i7.HDWallet {
  MockHDWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getAddress() => (super.noSuchMethod(
        Invocation.method(
          #getAddress,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getAddress,
            [],
          ),
        ),
      ) as String);

  @override
  _i3.Future<_i6.Uint8List> signMessage(
    _i6.Uint8List? message, {
    int? chainId,
    bool? isEIP1559 = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signMessage,
          [message],
          {
            #chainId: chainId,
            #isEIP1559: isEIP1559,
          },
        ),
        returnValue: _i3.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i3.Future<_i6.Uint8List>);

  @override
  _i3.Future<bool> verifySignature(
    _i6.Uint8List? message,
    _i6.Uint8List? signature,
    _i8.EthereumAddress? address, {
    int? chainId,
    bool? isEIP1559 = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifySignature,
          [
            message,
            signature,
            address,
          ],
          {
            #chainId: chainId,
            #isEIP1559: isEIP1559,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
